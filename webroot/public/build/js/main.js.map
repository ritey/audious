{"version":3,"names":[],"mappings":"","sources":["main.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AppView = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _SongCollection = require('./collections/SongCollection');\n\nvar _song_details_player = require('./templates/song_details_player.tpl');\n\nvar _Song = require('./models/Song');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } //import Marionette from 'backbone.marionette';\n\n\n//import { PlaylistCollection } from './collections/PlaylistCollection';\n//import { SongView } from './views/SongView';\n//import { SyncView } from './views/SyncView';\n//import { SyncCollection } from './collections/SyncCollection';\n\nvar _Backbone = Backbone;\nvar Model = _Backbone.Model;\nvar View = _Backbone.View;\nvar Collection = _Backbone.Collection;\nvar Router = _Backbone.Router;\n//var { Application } = Marionette;\n\n//var Playlists = new PlaylistCollection();\n\n//http://marionettejs.com/docs/v3.0.0-pre.2/marionette.application.html#getting-started\n/*export class App extends Application\n{\n  constructor() {\n    super();\n    this.addRegions({\n      syncRegion: \"#sync\"\n    });\n\n    this.syncCollection = new SyncCollection();\n    //var syncView = new SyncView();\n    console.log(this.syncCollection);\n    console.log('hello, Marionette');\n  }\n}*/\n\nvar AppView = exports.AppView = function (_View) {\n  _inherits(AppView, _View);\n\n  _createClass(AppView, [{\n    key: 'events',\n\n    // Define events we gonna listen on.\n    get: function get() {\n      return {\n        \"click button.player.play\": \"player_play\",\n        \"click button.player.pause\": \"player_pause\",\n        \"click button.player.stop\": \"player_stop\"\n      };\n    }\n  }]);\n\n  function AppView(options) {\n    _classCallCheck(this, AppView);\n\n    //this.el = '#app';\n    //this.$sync = $('#sync');\n\n    //this.soundcloudReady = false;\n\n    // Authorise Soundcloud SDK.\n    /*if ($(\"meta[name='soundcloud_client_id']\").length) {\n      this.authorise();\n    }*/\n\n    // Player song details tpl.\n\n    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(AppView).call(this, options));\n\n    _this.song_details_template = _song_details_player.SONG_DETAILS_PLAYER;\n\n    // Init player.\n    _this.player = new Audio();\n    // Variable for playing song. holds even when paused.\n    _this.current_song = {\n      model: {},\n      current_time: 0,\n      total_time: 0\n    };\n    // Soundcloud cliend_id;\n    _this.soundcloud_client_id = $(\"meta[name='soundcloud_client_id']\").attr('content');\n\n    _this.songs = new _SongCollection.SongCollection();\n\n    // Listen for events.\n    _this.listenTo(_this.songs, 'play', _this.play);\n    _this.listenTo(_this.songs, 'pause', _this.pause);\n\n    // Add CSRF token for ajax requests.\n    _this.addCSRFToken();\n\n    // Sync music if needed.\n    _this.syncAllMusic();\n    return _this;\n  }\n\n  /**\n   * Render App.\n   */\n\n\n  _createClass(AppView, [{\n    key: 'render',\n    value: function render() {\n      this.$el.html(this.template());\n      return this;\n    }\n\n    /**\n     * Add CSRF token for ajax requests.\n     */\n\n  }, {\n    key: 'addCSRFToken',\n    value: function addCSRFToken() {\n      if ($(\"meta[name='_token'\").length) {\n        $.ajaxSetup({\n          headers: {\n            \"accept\": \"application/json\",\n            \"X-CSRF-TOKEN\": $(\"meta[name='_token'\").attr('content')\n          }\n        });\n      }\n    }\n\n    /**\n     * Sync all music.\n     */\n\n  }, {\n    key: 'syncAllMusic',\n    value: function syncAllMusic() {\n      var context = this;\n      // Check if there is any refresh icons.\n      if ($('#sync i.fa-refresh').length) {\n        // Found refresh icon - sync.\n        $('#sync i.fa-refresh').each(function () {\n          context.syncMusic($(this).parents('li.sync-service'));\n        });\n      }\n    }\n\n    /**\n     * Sync service music\n     * @param  jQuery obj $elem\n     */\n\n  }, {\n    key: 'syncMusic',\n    value: function syncMusic($elem) {\n      var title = $elem.attr('data-service-title');\n      Backbone.ajax({\n        dataType: \"json\",\n        url: \"/api/sync/\" + title,\n        data: \"\",\n        success: function success(val) {\n          //collection.add(val);  //or reset\n          //console.log(collection);\n          console.log(val);\n        }\n      });\n    }\n  }, {\n    key: 'play',\n    value: function play(song) {\n      // Construct function name from service variable and call it.\n      if (this.current_song.model != song) {\n        this[song.get('service') + '_load'](song);\n      } else {\n        this[song.get('service') + '_play'](song);\n      }\n\n      this.updateMusicPlayer(song);\n    }\n  }, {\n    key: 'pause',\n    value: function pause(song) {\n      this[song.get('service') + '_pause'](song);\n    }\n\n    /**\n     * Play\n     */\n\n  }, {\n    key: 'soundcloud_load',\n    value: function soundcloud_load(song) {\n      this.player.pause();\n      this.player.src = 'https://api.soundcloud.com/tracks/' + song.get('identifier') + '/stream?consumer_key=' + this.soundcloud_client_id;\n      this.player.load();\n      this.player.play();\n\n      this.current_song.model = song;\n    }\n\n    /**\n     * Play song.\n     */\n\n  }, {\n    key: 'soundcloud_play',\n    value: function soundcloud_play(song) {\n      this.player.play();\n    }\n    /**\n     * Stop song.\n     */\n\n  }, {\n    key: 'soundcloud_stop',\n    value: function soundcloud_stop(song) {\n      this.soundcloud_pause();\n    }\n\n    /**\n     * Pause song.\n     */\n\n  }, {\n    key: 'soundcloud_pause',\n    value: function soundcloud_pause(song) {\n      this.player.pause();\n    }\n\n    /**\n     *  MUSIC PLAYER AT BOTTOM FUNCTIONS.\n     */\n\n  }, {\n    key: 'player_play',\n    value: function player_play() {\n      if (this.current_song.model.id.length) {\n        this.current_song.model.toggle();\n        this.play(this.current_song.model);\n      }\n    }\n\n    /**\n     * Music Player pause button action.\n     */\n\n  }, {\n    key: 'player_pause',\n    value: function player_pause() {\n      // Duplicate in SongView!\n      this.current_song.model.toggle();\n      this.pause(this.current_song.model);\n      this.updateMusicPlayer(this.current_song);\n    }\n\n    /**\n     * Music Player stop button action.\n     */\n\n  }, {\n    key: 'player_stop',\n    value: function player_stop() {\n      this.current_song.model.toggle();\n      this.pause(this.current_song.model);\n      this.current_song.model = new _Song.Song();\n      this.updateMusicPlayer(this.current_song);\n    }\n    /**\n       * Update Music Player details\n       */\n\n  }, {\n    key: 'updateMusicPlayer',\n    value: function updateMusicPlayer(song) {\n      // Set play/pause button.\n      var play_action = this.player.paused ? 'play' : 'pause';\n      var extend = {\n        play_action: play_action,\n        current_time: 0\n      };\n      var data = _.extend(song.toJSON(), extend);\n      $('#player').html(this.song_details_template(data));\n    }\n\n    /**\n     * Display all songs.\n     */\n    /*addAll() {\n      //this.$('#playlist').html('');\n      // Iterate through songs and add each to html.\n      Songs.each(this.addOne, this);\n    }*/\n\n    /**\n     * Display one song.\n     */\n    /*addOne(model) {\n      var view = new SongView({ model });\n      // Append list with rendered Song partial view.\n      $('#playlist').append(view.render().el);\n    }*/\n\n    /**\n     * Authorize Soundcloud SDK\n     */\n    /*authorise() {\n      SC.initialize({\n        client_id: $(\"meta[name='soundcloud_client_id']\").attr('content'),\n        redirect_uri: $(\"meta[name='soundcloud_redirect_uri']\").attr('content')\n      });\n       this.soundcloudReady = true;\n    }*/\n\n  }]);\n\n  return AppView;\n}(View);\n\n},{\"./collections/SongCollection\":2,\"./models/Song\":4,\"./templates/song_details_player.tpl\":6}],2:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SongCollection = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Song = require('../models/Song');\n\nvar _SongView = require('../views/SongView');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _Backbone = Backbone;\nvar Collection = _Backbone.Collection;\n\n/**\n * Song Collection\n */\n\nvar SongCollection = exports.SongCollection = function (_Collection) {\n  _inherits(SongCollection, _Collection);\n\n  function SongCollection() {\n    _classCallCheck(this, SongCollection);\n\n    // Attach model.\n\n    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(SongCollection).call(this));\n\n    _this.model = _Song.Song;\n\n    // backend API url\n    _this.url = '/api/song';\n\n    // Parse songs from DOM.\n    _.each($('#tracklist ul li.song'), function (elem) {\n      var song = new _Song.Song({\n        id: $(elem).attr('data-id'),\n        identifier: $(elem).attr('data-identifier'),\n        title: $(elem).text(),\n        service: $(elem).parents('.playlists').attr('data-service'),\n        playlist: $(elem).parents('.playlist').attr('data-playlist'),\n        active: $(elem).hasClass('active')\n      });\n\n      // If ever need to attach a view to it.\n      var songView = new _SongView.SongView({\n        model: song,\n        el: elem,\n        tagName: 'li'\n      });\n\n      this.add(song);\n    }, _this);\n    return _this;\n  }\n\n  /**\n   * Get active song.\n   */\n\n\n  _createClass(SongCollection, [{\n    key: 'active',\n    value: function active() {\n      return this.filter(function (song) {\n        return song.get('active');\n      });\n    }\n  }]);\n\n  return SongCollection;\n}(Collection);\n\n},{\"../models/Song\":4,\"../views/SongView\":8}],3:[function(require,module,exports){\n\"use strict\";\n\nvar _app = require(\"./app\");\n\n/**\n * Document ready event\n */\n$(function () {\n  // Need to pass el in order for events to work.\n  // This is probably because I am trying to attach events on existing DOM.\n  new _app.AppView({ el: \"#app\" });\n}); /**\n     * ES6\n     * ref:\n     * http://tastejs.com/todomvc-backbone-es6/\n     * https://github.com/tastejs/todomvc-backbone-es6/blob/gh-pages/js/app.js\n     * https://github.com/tastejs/todomvc-backbone-es6/blob/gh-pages/js/todo-app.js\n     * Browserify: https://github.com/substack/node-browserify#usage\n     * Image lazyload:\n     * http://luis-almeida.github.io/unveil/\n     * http://stackoverflow.com/questions/18366550/using-lazy-loading-with-backbone\n     *\n     * Backbone tutorial:\n     * https://github.com/amejiarosario/Backbone-tutorial/blob/master/backbone-tutorial.html\n     * http://adrianmejia.com/blog/2012/09/11/backbone-dot-js-for-absolute-beginners-getting-started/\n     *\n     * Soundcloud JS SDK\n     * https://developers.soundcloud.com/docs/api/sdks\n     *\n     * Handy!!\n     * http://simblestudios.com/blog/development/wmtafo-backbone-part1.html\n     *\n     * Backbone.js Patterns:\n     * http://ricostacruz.com/backbone-patterns/index.html\n     *\n     * soundcloud player:\n     * https://github.com/soundcloud/soundcloud-custom-player/blob/master/js/sc-player.js\n     */\n\n},{\"./app\":1}],4:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _Backbone = Backbone;\nvar Model = _Backbone.Model;\n/**\n * Song model.\n */\n\nvar Song = exports.Song = function (_Model) {\n  _inherits(Song, _Model);\n\n  function Song() {\n    _classCallCheck(this, Song);\n\n    return _possibleConstructorReturn(this, Object.getPrototypeOf(Song).apply(this, arguments));\n  }\n\n  _createClass(Song, [{\n    key: 'defaults',\n\n    /**\n     * Default Song model params.\n     */\n    value: function defaults() {\n      return {\n        id: '',\n        identifier: '',\n        title: '',\n        service: '',\n        playlist: '',\n        //duration: 0,\n        active: false\n      };\n    }\n\n    /**\n     * Parse Song details.\n     * At this stage Backbone iterates through individual SongCollection items.\n     */\n    /*parse(response) {*/\n    /**\n     * Convenient underscore.js method to extract needed data subset from larger one.\n     */\n    /*return _.pick(response, 'title', 'duration');\n    }*/\n\n    /**\n     * Toggle active state.\n     */\n\n  }, {\n    key: 'toggle',\n    value: function toggle() {\n      this.save({\n        active: !this.get('active')\n      });\n    }\n  }]);\n\n  return Song;\n}(Model);\n\n},{}],5:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Songs list item template.\n */\nvar SONG_ACTIVE_LI_TPL = exports.SONG_ACTIVE_LI_TPL = _.template(\"<button class='pause playlist'><i class='fa fa-pause' aria-hidden='true'></i></button>\" + \"<span class='title'><%= title %></span>\");\n\n},{}],6:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Song details in music player at the bottom of the screen.\n */\nvar SONG_DETAILS_PLAYER = exports.SONG_DETAILS_PLAYER = _.template(\"<div class='controls'>\" + \"<button class='<%= play_action %> player'><i class='fa fa-<%= play_action %>' aria-hidden='true'></i></button>\" + \"<button class='stop player'><i class='fa fa-stop' aria-hidden='true'></i></button>\" + \"<button class='previous player'><i class='fa fa-backward' aria-hidden='true'></i></button>\" + \"<button class='next player'><i class='fa fa-forward' aria-hidden='true'></i></button>\" + \"</div>\" + \"<div class='song-details'>\" + \"<span class='title'><%= title %></span> <span><%= current_time %></span>\" + \"</div>\");\n\n},{}],7:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Songs list item template.\n */\nvar SONG_INACTIVE_LI_TPL = exports.SONG_INACTIVE_LI_TPL = _.template(\"<button class='play playlist'><i class='fa fa-play' aria-hidden='true'></i></button>\" + \"<span class='title'><%= title %></span>\");\n\n},{}],8:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SongView = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _song_inactive_li = require('../templates/song_inactive_li.tpl');\n\nvar _song_active_li = require('../templates/song_active_li.tpl');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _Backbone = Backbone;\nvar View = _Backbone.View;\n\nvar SongView = exports.SongView = function (_View) {\n  _inherits(SongView, _View);\n\n  _createClass(SongView, [{\n    key: 'events',\n\n    // Define events we gonna listen on.\n    get: function get() {\n      return {\n        \"click button.playlist.play\": \"play\",\n        \"click button.playlist.pause\": \"pause\"\n      };\n    }\n  }]);\n\n  function SongView(options) {\n    _classCallCheck(this, SongView);\n\n    // Cache templates:\n    // Song inactive item tpl.\n\n    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(SongView).call(this, options));\n\n    _this.song_inactive_li_template = _song_inactive_li.SONG_INACTIVE_LI_TPL;\n    // Song active item tpl.\n    _this.song_active_li_template = _song_active_li.SONG_ACTIVE_LI_TPL;\n    // Player song details tpl.\n    //this.song_details_template = SONG_DETAILS_PLAYER;\n    // Listen for model changes.\n    _this.listenTo(_this.model, 'change', _this.render);\n\n    // Render item.\n    _this.render();\n    return _this;\n  }\n\n  _createClass(SongView, [{\n    key: 'render',\n    value: function render() {\n      var is_active = this.model.get('active');\n\n      if (is_active) {\n        // Pass model data to template and then append to DOM.\n        this.$el.html(this.song_active_li_template(this.model.toJSON()));\n      } else {\n        // Pass model data to template and then append to DOM.\n        this.$el.html(this.song_inactive_li_template(this.model.toJSON()));\n      }\n\n      // Add active class to active song DOM elem.\n      this.$el.toggleClass('active', is_active);\n\n      return this;\n    }\n\n    /**\n     * Play button event callback.\n     */\n\n  }, {\n    key: 'play',\n    value: function play() {\n      // Deactivate current active song.\n      this.deactivate();\n      // Activate new song.\n      this.model.toggle();\n\n      this.model.trigger('play', this.model);\n\n      this.render();\n    }\n\n    /**\n     * Pause button event callback.\n     */\n\n  }, {\n    key: 'pause',\n    value: function pause() {\n      // Deactivate current active song.\n      this.deactivate();\n\n      this.model.trigger('pause', this.model);\n\n      this.render();\n    }\n\n    /**\n     * Deactivate current active song.\n     */\n\n  }, {\n    key: 'deactivate',\n    value: function deactivate() {\n      var active = this.model.collection.active();\n      if (active.length) {\n        // Just in case if there were more than 1 active song.\n        for (var i = 0; i < active.length; i++) {\n          active[i].toggle();\n        }\n      }\n    }\n  }]);\n\n  return SongView;\n}(View);\n\n},{\"../templates/song_active_li.tpl\":5,\"../templates/song_inactive_li.tpl\":7}]},{},[3]);\n"],"file":"main.js","sourceRoot":"/source/"}